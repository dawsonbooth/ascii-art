{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 Description \u00b6 Named as such, this package is a command-line ASCII art generator written in Python. There is a variety of parameters which are detailed below. Installation \u00b6 With Python installed, install the package from PyPI with the following command: 1 python -m pip install ascii-art-cli This package is not to be confused with ascii_art or other various ASCII art packages. Usage \u00b6 This is a command-line program, and can be executed as follows: 1 ascii-art [ -h ] [ --width WIDTH ] [ --height HEIGHT ] [ --chars CHARS ] [ --font FONT ] [ --invert ] [ --normalize ] input Positional arguments: 1 input Path to image from which ASCII art will be generated Optional arguments: 1 2 3 4 5 6 7 -h, --help show this help message and exit --width WIDTH Character width of ASCII art --height HEIGHT Character height of ASCII art --chars CHARS String containing characters to be seen in ASCII art --font FONT Font for calculating the character weights --invert Whether the ASCII output color is inverted --normalize Whether the weights of the provided ASCII characters are normalized Example: 1 ascii-art examples/images/einstein.jpg --width 100 --height 50 --font \"Courier\" --invert --normalize 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ,;+;;+;;;,?;?;;;,,,,,,;,;',,'',;%S;;;%SS%SSSSSSSSSSSSSSSSSSSSSSSSS%%%%%%??%%%%;'S+.. . . +;;;?;+;,++;;,,,,,;,,,,,,,,,';+%S,,%S%SS#SSSSSS####S#S##S##SSSSSSS%S%%%%%%%S%SS+'%'. ?+;;,;+;;,;+;;;,,,,;,,,','',;%%%',S%S%SSSSSS#SSSS#SSSSS####SSS#SSSSS%S%%S%%%%S%%%;;'. .. %+;%+;?++;;,,;,,,,,,',,',,;+,%?;'?;%SSSSS#SSSSS##SS######@##SSSS#SSSS%S%S%%%%%S%%'%'' .... . ?????;;??;;;+,,+,,,,''',;+;;;;;',%%%SSS#######S###########SSS##SSSSSSS%SS%%%%SSS%?',;, . ... ?+;??++;;+;;;,,,,,''',,;%?%%,,''%,%SSSS#######S#####@#######SSS%#SSSSSS%%%%%%SSSS%;?.'''. . ;?%;;;+;;+;,,,,,,''',;S?;,',;,'+,S%?%SSS#@###SS########@#SSSS#SSSSSSSS%SS%%%%S%S%S?%' .' . ???;;;++,;+;,;',''',%S'?;,+,,?.;?%S%%SSS#@############S###SSSSSSSSSSSSSSSS%%SSSSS%+,,.. ', . ??+?;;%++;;,,,,,,;';%',,;;;';%';%'.',+,SSS###SSS##SSS%,',SS%S#%SSSSSSSSSSS%SS%SS%%%,;,. .' %;+;?+;+;;;+,,,,,''?''?;?+,;%?.''.'',%SS##S#SSS##SSSSSS?;,;%??SSSSSSSSSSSSSSSSSSS%?%;'+'..'. S????;;;;;;;;;,'',,%,;+,%?,,%;'%;;%%%%SSS##@SSS##SS###SSSSSSSSSSSSS%SSSSSS%SSSSSS%?+;,''.'.' ?,?+;;?;;;,,;,,,'+,''.%%;,,?%+.;?SSSSS%SSS#S#@###@####S##SSSSSSSS%SSSSSSSSSSSSS%%%????'',. .'.. . ,S;,;;??;;;;,',,''',.,,%;'';%,.%%SS%%%S%%SS####@@#SS#SS#SSSS#SSSSSSSSSSSSSS%SSS%%%%,;?;+., . %%?;;+%;;;+,,,',.,...,;;,',;?',%SS%%%??SS?%S#@@###SSSS%%+,;%SS#SSS%SSSSSSSSSSSSSSS%%,,+?;,,. . S?%;+;+;,,,,,';'.'.'',%,,,'+%''?S%,,?+?S%%,?S#@#S#SSSSS?+%%%+%SSSS%SSSSSSSSSSSSSSS%%%;?;%%' . S,+,;;;+,,,,''......',%''',;?',%?,'##;,?;S?'S@##SSS%%%;';.,S%%SSSS%SSSSS%SSSSSSSSS%S?;%;%;,S. . %%?;+,;,;,''.'......''%',',%,';%%'+S...;#%%'S#SSS%SS%?#S...,?%%SSS%SSS%S%SSSSSSSS%+%%?;;%%;,'; ,+?;;,;,,''''.... ..',?,'''%'';%S,;%,'%%;%,%SSSSS%#S%SSS...S%SSSSSSSSSS%SSSSSSS%S%%%??%?;+;;..,. ,%';,,;,''''......';.';.',.;'';%,;''%?S;SS'%SSSSS%SS%%%?%%%?+%SSSSSSSSS%%%SSSS%%%%%?%;?%%;,++ ; %%',';;,',''....'.., ;%.''.;.,+,?%?,%%%%%,,%SSSSSSSS?%S%%%%%%%S%%SSS%SSS%%SSSS%%%%%%%%%,%;;,;; S%',,'.;''''...,.....;,'''.'.,%;%%%%%%%%?';SSS%SSSSSSS%%SSSSSS%%SSSS%SS%%%%S%%%%;;;%%%%%+S?'+,' ' %;..''''','....'....,.,'.'...?%%%SSSS%SS''%SS%%%SSSS#SS#SSSSSSSS%%S%%%S%%%%%%%??S%',+%%%%?%+'+.. . %,. ...''.''...'...;'',..S...,%SSSSSSSS%'%SSSS%?%SSS###SSSSSSSSSSSSS%%%%%%%%%%;%%S;%;;%%%%%%%?,. ' +' ....''......'.?,''...,...%S#SS?SSS%,+SSSS%%%%SS#SS#S@#SSSS##SSS%%%%%%++;%?%SS%;?;.%%SSS%%?;''.. ?. . .........'.''.....'...%SSSS%SS%S,SS##SSS%?%S##SS########SSSSS%%%%%+;%;SSSSSS.%%%%SSS%;%%',. ,. ... ........'... ...'''...;#SS%SS%#';SS##@SS%%%%SS@@#S####S##SSS%%+%%?;,%%SSSS%%S%S.%SSSS%%S+'. .... .. . .........'..'...'..+%S%%%S#S,,%S#@#SS%SS%%SS@#####S##SS#SS?;%%%;;%S#SSS%SS%S%;SSSS%?S%' . ?, .... .... ....'.......,..;?%%SS##',',SSSSS%SSSS?S#S##@#S#S#SSSSS%;%%?%++%%%SS%%SS%%;S#SS,%S%;.'. ,,.... . .. .. .........,,..++;%S##SS?'.;%%%;#S@%%%SSSS####SSSSS+SS%?%%?%;%S#%S%S%SS%%+SSSS;;S%?. %;.. .... .. ... ..%'+S''..+%;SSSS%%?SSSS#SS#%S%SSSS#S%S#SSSSSSSSS+?%+%%;SSS%S;SSS%S;S#SSS?+S;''. ;, %#... .S. ..... .. '''..%S;%SSSSSSS#S#S%SS#SSSS%SSSSSSSSSSSSSSS%%%%%%,SSS?;??%S%%%SSSSS,,%, '.. ', ......... ... . .,''..%S;S%S%SS@@SSSS%S##S#S#SSSSSSSSSSSSSSSS+%%?%?+SSS%,%%%?%+SS%S%%,%; ' .. ,' . . . ....... .....'...;S,%,?SS%S#%S#SS#SSSS##%SSSSS+SSSSSSSS%;%%%%+%SS%??.'S%%%%;;SS%,'...... ' ...#. .. . .. .....'...,%;%?;;%%%SS#SSSS%S#%%%S%SSSSSSSSSSSSS%,S%%%;.S%?' ..;S;,%.'%,. ....... ' . . ...... .... .........'%;%%?,',,?;%;%++S%,,%,?S%#SS%SSSSSSSS%?%S%%%' .'. .;'......... . .. . ... ...............%%%SS;,.'.,'?';,,+SS,'+,;'SSSSSSSSSSS%;SS%+,' . ........... .. .. ....... ..........%%'SSS%,,,?;%%?%%%%%;%,..;;SSS#SSSSSS%,SS%+' . . ......'....' . ..... ...............+%;SSS?.%S%%S%S%%%%%?''++%%?SSSSSSSS?SS%, . ... .....'..',, . . . .......'........%S,SS#%.%%%%%%%S%S%?,,%SS#%?SS%SSSSS,S%, .. ..... .......'',, .......................%S?##S.S#%S%S%%;SS;%%%%SSS%SS%SSSS+SS. ... ....'. ''+,' . . ... ........'........'S+S#S.;SS%%;%%+#,,+?%S#SS%S%%SSSS%S . . ... .......',+,'; ..'..................;SS#S.+S#SS%;;%S;,,%SSS#SSS?S#S%,%. . . .... ..... .,'+,,', ',,''''..........'......S'#S.'%@S%%?;%%';%S%SSSSSS;SS%+. . . . . . .. . ....,,;,';,, . ,,,,,,','............'....'SSS,.%SS+%%%S;%S%SS##SS#SS#S?... .. . .... ..... ',;,,';,', ,,,',,,,,'''..........'''....%,SS.;%S%%?S%;%SS#S###SS%SS'.. .. . . . . . .'',++,;,;;, ,,,,,,,,,,,',.'.........''''....'?S%.?%?S%?,SS#SSS###SSSS.... ... .. ..... .. ...';+%?,;,'',' . ,,,;,,,,,,,,,,,'''...''''''''''.....?S..%%%%%S##SSSS#S#S%........ . ....... ..,,,,',;,;'''. ',,,,,,,,,,',,,,,','....'''''''''......%%..;+;SS@S#SSSSSS,.................... ... ''',,,',;;+',.. ,,,,,;,,,,,',,;,,,'''.''.'''''''''......%%+,%####S####S%............ ........... .'',;;;'+,;';''.. ,;,,,;,,,,,,;,,,;,,''.'''''''''..''......?%SSSSSS#SSS%............ ....'........ ..,,,,',,%;,'''..' By default, the command will output the generated ASCII art to the console. If instead you would like to output to a file, feel free to use the redirection > operator. More info on that here . Feel free to check out the docs for more information on how to use this package. License \u00b6 This software is released under the terms of MIT license .","title":"Overview"},{"location":"#_1","text":"","title":""},{"location":"#description","text":"Named as such, this package is a command-line ASCII art generator written in Python. There is a variety of parameters which are detailed below.","title":"Description"},{"location":"#installation","text":"With Python installed, install the package from PyPI with the following command: 1 python -m pip install ascii-art-cli This package is not to be confused with ascii_art or other various ASCII art packages.","title":"Installation"},{"location":"#usage","text":"This is a command-line program, and can be executed as follows: 1 ascii-art [ -h ] [ --width WIDTH ] [ --height HEIGHT ] [ --chars CHARS ] [ --font FONT ] [ --invert ] [ --normalize ] input Positional arguments: 1 input Path to image from which ASCII art will be generated Optional arguments: 1 2 3 4 5 6 7 -h, --help show this help message and exit --width WIDTH Character width of ASCII art --height HEIGHT Character height of ASCII art --chars CHARS String containing characters to be seen in ASCII art --font FONT Font for calculating the character weights --invert Whether the ASCII output color is inverted --normalize Whether the weights of the provided ASCII characters are normalized Example: 1 ascii-art examples/images/einstein.jpg --width 100 --height 50 --font \"Courier\" --invert --normalize 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 ,;+;;+;;;,?;?;;;,,,,,,;,;',,'',;%S;;;%SS%SSSSSSSSSSSSSSSSSSSSSSSSS%%%%%%??%%%%;'S+.. . . +;;;?;+;,++;;,,,,,;,,,,,,,,,';+%S,,%S%SS#SSSSSS####S#S##S##SSSSSSS%S%%%%%%%S%SS+'%'. ?+;;,;+;;,;+;;;,,,,;,,,','',;%%%',S%S%SSSSSS#SSSS#SSSSS####SSS#SSSSS%S%%S%%%%S%%%;;'. .. %+;%+;?++;;,,;,,,,,,',,',,;+,%?;'?;%SSSSS#SSSSS##SS######@##SSSS#SSSS%S%S%%%%%S%%'%'' .... . ?????;;??;;;+,,+,,,,''',;+;;;;;',%%%SSS#######S###########SSS##SSSSSSS%SS%%%%SSS%?',;, . ... ?+;??++;;+;;;,,,,,''',,;%?%%,,''%,%SSSS#######S#####@#######SSS%#SSSSSS%%%%%%SSSS%;?.'''. . ;?%;;;+;;+;,,,,,,''',;S?;,',;,'+,S%?%SSS#@###SS########@#SSSS#SSSSSSSS%SS%%%%S%S%S?%' .' . ???;;;++,;+;,;',''',%S'?;,+,,?.;?%S%%SSS#@############S###SSSSSSSSSSSSSSSS%%SSSSS%+,,.. ', . ??+?;;%++;;,,,,,,;';%',,;;;';%';%'.',+,SSS###SSS##SSS%,',SS%S#%SSSSSSSSSSS%SS%SS%%%,;,. .' %;+;?+;+;;;+,,,,,''?''?;?+,;%?.''.'',%SS##S#SSS##SSSSSS?;,;%??SSSSSSSSSSSSSSSSSSS%?%;'+'..'. S????;;;;;;;;;,'',,%,;+,%?,,%;'%;;%%%%SSS##@SSS##SS###SSSSSSSSSSSSS%SSSSSS%SSSSSS%?+;,''.'.' ?,?+;;?;;;,,;,,,'+,''.%%;,,?%+.;?SSSSS%SSS#S#@###@####S##SSSSSSSS%SSSSSSSSSSSSS%%%????'',. .'.. . ,S;,;;??;;;;,',,''',.,,%;'';%,.%%SS%%%S%%SS####@@#SS#SS#SSSS#SSSSSSSSSSSSSS%SSS%%%%,;?;+., . %%?;;+%;;;+,,,',.,...,;;,',;?',%SS%%%??SS?%S#@@###SSSS%%+,;%SS#SSS%SSSSSSSSSSSSSSS%%,,+?;,,. . S?%;+;+;,,,,,';'.'.'',%,,,'+%''?S%,,?+?S%%,?S#@#S#SSSSS?+%%%+%SSSS%SSSSSSSSSSSSSSS%%%;?;%%' . S,+,;;;+,,,,''......',%''',;?',%?,'##;,?;S?'S@##SSS%%%;';.,S%%SSSS%SSSSS%SSSSSSSSS%S?;%;%;,S. . %%?;+,;,;,''.'......''%',',%,';%%'+S...;#%%'S#SSS%SS%?#S...,?%%SSS%SSS%S%SSSSSSSS%+%%?;;%%;,'; ,+?;;,;,,''''.... ..',?,'''%'';%S,;%,'%%;%,%SSSSS%#S%SSS...S%SSSSSSSSSS%SSSSSSS%S%%%??%?;+;;..,. ,%';,,;,''''......';.';.',.;'';%,;''%?S;SS'%SSSSS%SS%%%?%%%?+%SSSSSSSSS%%%SSSS%%%%%?%;?%%;,++ ; %%',';;,',''....'.., ;%.''.;.,+,?%?,%%%%%,,%SSSSSSSS?%S%%%%%%%S%%SSS%SSS%%SSSS%%%%%%%%%,%;;,;; S%',,'.;''''...,.....;,'''.'.,%;%%%%%%%%?';SSS%SSSSSSS%%SSSSSS%%SSSS%SS%%%%S%%%%;;;%%%%%+S?'+,' ' %;..''''','....'....,.,'.'...?%%%SSSS%SS''%SS%%%SSSS#SS#SSSSSSSS%%S%%%S%%%%%%%??S%',+%%%%?%+'+.. . %,. ...''.''...'...;'',..S...,%SSSSSSSS%'%SSSS%?%SSS###SSSSSSSSSSSSS%%%%%%%%%%;%%S;%;;%%%%%%%?,. ' +' ....''......'.?,''...,...%S#SS?SSS%,+SSSS%%%%SS#SS#S@#SSSS##SSS%%%%%%++;%?%SS%;?;.%%SSS%%?;''.. ?. . .........'.''.....'...%SSSS%SS%S,SS##SSS%?%S##SS########SSSSS%%%%%+;%;SSSSSS.%%%%SSS%;%%',. ,. ... ........'... ...'''...;#SS%SS%#';SS##@SS%%%%SS@@#S####S##SSS%%+%%?;,%%SSSS%%S%S.%SSSS%%S+'. .... .. . .........'..'...'..+%S%%%S#S,,%S#@#SS%SS%%SS@#####S##SS#SS?;%%%;;%S#SSS%SS%S%;SSSS%?S%' . ?, .... .... ....'.......,..;?%%SS##',',SSSSS%SSSS?S#S##@#S#S#SSSSS%;%%?%++%%%SS%%SS%%;S#SS,%S%;.'. ,,.... . .. .. .........,,..++;%S##SS?'.;%%%;#S@%%%SSSS####SSSSS+SS%?%%?%;%S#%S%S%SS%%+SSSS;;S%?. %;.. .... .. ... ..%'+S''..+%;SSSS%%?SSSS#SS#%S%SSSS#S%S#SSSSSSSSS+?%+%%;SSS%S;SSS%S;S#SSS?+S;''. ;, %#... .S. ..... .. '''..%S;%SSSSSSS#S#S%SS#SSSS%SSSSSSSSSSSSSSS%%%%%%,SSS?;??%S%%%SSSSS,,%, '.. ', ......... ... . .,''..%S;S%S%SS@@SSSS%S##S#S#SSSSSSSSSSSSSSSS+%%?%?+SSS%,%%%?%+SS%S%%,%; ' .. ,' . . . ....... .....'...;S,%,?SS%S#%S#SS#SSSS##%SSSSS+SSSSSSSS%;%%%%+%SS%??.'S%%%%;;SS%,'...... ' ...#. .. . .. .....'...,%;%?;;%%%SS#SSSS%S#%%%S%SSSSSSSSSSSSS%,S%%%;.S%?' ..;S;,%.'%,. ....... ' . . ...... .... .........'%;%%?,',,?;%;%++S%,,%,?S%#SS%SSSSSSSS%?%S%%%' .'. .;'......... . .. . ... ...............%%%SS;,.'.,'?';,,+SS,'+,;'SSSSSSSSSSS%;SS%+,' . ........... .. .. ....... ..........%%'SSS%,,,?;%%?%%%%%;%,..;;SSS#SSSSSS%,SS%+' . . ......'....' . ..... ...............+%;SSS?.%S%%S%S%%%%%?''++%%?SSSSSSSS?SS%, . ... .....'..',, . . . .......'........%S,SS#%.%%%%%%%S%S%?,,%SS#%?SS%SSSSS,S%, .. ..... .......'',, .......................%S?##S.S#%S%S%%;SS;%%%%SSS%SS%SSSS+SS. ... ....'. ''+,' . . ... ........'........'S+S#S.;SS%%;%%+#,,+?%S#SS%S%%SSSS%S . . ... .......',+,'; ..'..................;SS#S.+S#SS%;;%S;,,%SSS#SSS?S#S%,%. . . .... ..... .,'+,,', ',,''''..........'......S'#S.'%@S%%?;%%';%S%SSSSSS;SS%+. . . . . . .. . ....,,;,';,, . ,,,,,,','............'....'SSS,.%SS+%%%S;%S%SS##SS#SS#S?... .. . .... ..... ',;,,';,', ,,,',,,,,'''..........'''....%,SS.;%S%%?S%;%SS#S###SS%SS'.. .. . . . . . .'',++,;,;;, ,,,,,,,,,,,',.'.........''''....'?S%.?%?S%?,SS#SSS###SSSS.... ... .. ..... .. ...';+%?,;,'',' . ,,,;,,,,,,,,,,,'''...''''''''''.....?S..%%%%%S##SSSS#S#S%........ . ....... ..,,,,',;,;'''. ',,,,,,,,,,',,,,,','....'''''''''......%%..;+;SS@S#SSSSSS,.................... ... ''',,,',;;+',.. ,,,,,;,,,,,',,;,,,'''.''.'''''''''......%%+,%####S####S%............ ........... .'',;;;'+,;';''.. ,;,,,;,,,,,,;,,,;,,''.'''''''''..''......?%SSSSSS#SSS%............ ....'........ ..,,,,',,%;,'''..' By default, the command will output the generated ASCII art to the console. If instead you would like to output to a file, feel free to use the redirection > operator. More info on that here . Feel free to check out the docs for more information on how to use this package.","title":"Usage"},{"location":"#license","text":"This software is released under the terms of MIT license .","title":"License"},{"location":"reference/ascii_art/","text":"Module ascii_art \u00b6 None None View Source from PIL import Image , ImageDraw , ImageFont def weigh ( c , font ): \"\"\"Find and return density of dark pixels in the given character\"\"\" w , h = ( 6 , 11 ) fw , fh = font . getsize ( c ) im = Image . new ( \"L\" , ( fw , fh )) draw = ImageDraw . Draw ( im ) draw . text ((( w - fw ) / 2 , ( h - fh ) / 2 ), c , 255 , font = font ) n = len ([ p for p in im . getdata () if p > 0 ]) return n / ( w * h ) def weigh_chars ( chars , font , invert : bool , normalize : bool ): weighted_chars = dict () for c in chars : w = weigh ( c , font ) weighted_chars [ c ] = w if invert else 1 - w if normalize : cmax = max ( weighted_chars . values ()) cmin = min ( weighted_chars . values ()) for c in weighted_chars . keys (): weighted_chars [ c ] = ( weighted_chars [ c ] - cmin ) / ( cmax - cmin ) return weighted_chars def find_char ( pixel , weighted_chars ): \"\"\"Find and return character from dict with similar darkness to image pixel\"\"\" return min ( weighted_chars . keys (), key = lambda c : abs ( pixel - weighted_chars [ c ])) def image_to_ascii ( image , width = None , height = None , chars = \" .',:;+*?%S#@\" , font = None , invert = False , normalize = False ): \"\"\"Convert image to ASCII chars\"\"\" img_w , img_h = image . size if width and not height : height = int ( img_h * ( width / img_w )) elif height and not width : width = int ( img_w * ( height / img_h )) elif not ( height or width ): width , height = img_w , img_h image = image . resize (( width , height )) . convert ( \"L\" ) if not font : font = ImageFont . load_default () elif isinstance ( font , str ): font = ImageFont . truetype ( font ) weighted_chars = weigh_chars ( chars , font , invert , normalize ) pixels = image . load () ascii_art = \"\" for i in range ( height ): for j in range ( width ): ascii_art += find_char ( pixels [ j , i ] / 255 , weighted_chars ) if j == width - 1 : ascii_art += \" \\n \" return ascii_art Functions \u00b6 find_char \u00b6 1 2 3 4 def find_char ( pixel , weighted_chars ) Find and return character from dict with similar darkness to image pixel View Source def find_char ( pixel , weighted_chars ) : \"\"\"Find and return character from dict with similar darkness to image pixel\"\"\" return min ( weighted_chars . keys (), key = lambda c : abs ( pixel - weighted_chars [ c ] )) image_to_ascii \u00b6 1 2 3 4 5 6 7 8 9 def image_to_ascii ( image , width = None , height = None , chars = \" .',:;+*?%S#@\" , font = None , invert = False , normalize = False ) Convert image to ASCII chars View Source def image_to_ascii ( image , width = None , height = None , chars = \" .',:;+*?%S#@\" , font = None , invert = False , normalize = False ) : \"\"\"Convert image to ASCII chars\"\"\" img_w , img_h = image . size if width and not height : height = int ( img_h * ( width / img_w )) elif height and not width : width = int ( img_w * ( height / img_h )) elif not ( height or width ) : width , height = img_w , img_h image = image . resize (( width , height )). convert ( \"L\" ) if not font : font = ImageFont . load_default () elif isinstance ( font , str ) : font = ImageFont . truetype ( font ) weighted_chars = weigh_chars ( chars , font , invert , normalize ) pixels = image . load () ascii_art = \"\" for i in range ( height ) : for j in range ( width ) : ascii_art += find_char ( pixels [ j , i ] / 255 , weighted_chars ) if j == width - 1 : ascii_art += \" \\n \" return ascii_art weigh \u00b6 1 2 3 4 def weigh ( c , font ) Find and return density of dark pixels in the given character View Source def weigh ( c , font ) : \"\"\" Find and return density of dark pixels in the given character \"\"\" w , h = ( 6 , 11 ) fw , fh = font . getsize ( c ) im = Image . new ( \" L \" , ( fw , fh )) draw = ImageDraw . Draw ( im ) draw . text ((( w - fw ) / 2 , ( h - fh ) / 2 ) , c , 255 , font = font ) n = len ( [ p for p in im . getdata () if p > 0 ] ) return n / ( w * h ) weigh_chars \u00b6 1 2 3 4 5 6 def weigh_chars ( chars , font , invert : bool , normalize : bool ) View Source def weigh_chars ( chars , font , invert : bool , normalize : bool ) : weighted_chars = dict () for c in chars : w = weigh ( c , font ) weighted_chars [ c ] = w if invert else 1 - w if normalize : cmax = max ( weighted_chars . values ()) cmin = min ( weighted_chars . values ()) for c in weighted_chars . keys () : weighted_chars [ c ] = ( weighted_chars [ c ] - cmin ) / ( cmax - cmin ) return weighted_chars","title":"Ascii Art"},{"location":"reference/ascii_art/#module-ascii_art","text":"None None View Source from PIL import Image , ImageDraw , ImageFont def weigh ( c , font ): \"\"\"Find and return density of dark pixels in the given character\"\"\" w , h = ( 6 , 11 ) fw , fh = font . getsize ( c ) im = Image . new ( \"L\" , ( fw , fh )) draw = ImageDraw . Draw ( im ) draw . text ((( w - fw ) / 2 , ( h - fh ) / 2 ), c , 255 , font = font ) n = len ([ p for p in im . getdata () if p > 0 ]) return n / ( w * h ) def weigh_chars ( chars , font , invert : bool , normalize : bool ): weighted_chars = dict () for c in chars : w = weigh ( c , font ) weighted_chars [ c ] = w if invert else 1 - w if normalize : cmax = max ( weighted_chars . values ()) cmin = min ( weighted_chars . values ()) for c in weighted_chars . keys (): weighted_chars [ c ] = ( weighted_chars [ c ] - cmin ) / ( cmax - cmin ) return weighted_chars def find_char ( pixel , weighted_chars ): \"\"\"Find and return character from dict with similar darkness to image pixel\"\"\" return min ( weighted_chars . keys (), key = lambda c : abs ( pixel - weighted_chars [ c ])) def image_to_ascii ( image , width = None , height = None , chars = \" .',:;+*?%S#@\" , font = None , invert = False , normalize = False ): \"\"\"Convert image to ASCII chars\"\"\" img_w , img_h = image . size if width and not height : height = int ( img_h * ( width / img_w )) elif height and not width : width = int ( img_w * ( height / img_h )) elif not ( height or width ): width , height = img_w , img_h image = image . resize (( width , height )) . convert ( \"L\" ) if not font : font = ImageFont . load_default () elif isinstance ( font , str ): font = ImageFont . truetype ( font ) weighted_chars = weigh_chars ( chars , font , invert , normalize ) pixels = image . load () ascii_art = \"\" for i in range ( height ): for j in range ( width ): ascii_art += find_char ( pixels [ j , i ] / 255 , weighted_chars ) if j == width - 1 : ascii_art += \" \\n \" return ascii_art","title":"Module ascii_art"},{"location":"reference/ascii_art/#functions","text":"","title":"Functions"},{"location":"reference/ascii_art/#find_char","text":"1 2 3 4 def find_char ( pixel , weighted_chars ) Find and return character from dict with similar darkness to image pixel View Source def find_char ( pixel , weighted_chars ) : \"\"\"Find and return character from dict with similar darkness to image pixel\"\"\" return min ( weighted_chars . keys (), key = lambda c : abs ( pixel - weighted_chars [ c ] ))","title":"find_char"},{"location":"reference/ascii_art/#image_to_ascii","text":"1 2 3 4 5 6 7 8 9 def image_to_ascii ( image , width = None , height = None , chars = \" .',:;+*?%S#@\" , font = None , invert = False , normalize = False ) Convert image to ASCII chars View Source def image_to_ascii ( image , width = None , height = None , chars = \" .',:;+*?%S#@\" , font = None , invert = False , normalize = False ) : \"\"\"Convert image to ASCII chars\"\"\" img_w , img_h = image . size if width and not height : height = int ( img_h * ( width / img_w )) elif height and not width : width = int ( img_w * ( height / img_h )) elif not ( height or width ) : width , height = img_w , img_h image = image . resize (( width , height )). convert ( \"L\" ) if not font : font = ImageFont . load_default () elif isinstance ( font , str ) : font = ImageFont . truetype ( font ) weighted_chars = weigh_chars ( chars , font , invert , normalize ) pixels = image . load () ascii_art = \"\" for i in range ( height ) : for j in range ( width ) : ascii_art += find_char ( pixels [ j , i ] / 255 , weighted_chars ) if j == width - 1 : ascii_art += \" \\n \" return ascii_art","title":"image_to_ascii"},{"location":"reference/ascii_art/#weigh","text":"1 2 3 4 def weigh ( c , font ) Find and return density of dark pixels in the given character View Source def weigh ( c , font ) : \"\"\" Find and return density of dark pixels in the given character \"\"\" w , h = ( 6 , 11 ) fw , fh = font . getsize ( c ) im = Image . new ( \" L \" , ( fw , fh )) draw = ImageDraw . Draw ( im ) draw . text ((( w - fw ) / 2 , ( h - fh ) / 2 ) , c , 255 , font = font ) n = len ( [ p for p in im . getdata () if p > 0 ] ) return n / ( w * h )","title":"weigh"},{"location":"reference/ascii_art/#weigh_chars","text":"1 2 3 4 5 6 def weigh_chars ( chars , font , invert : bool , normalize : bool ) View Source def weigh_chars ( chars , font , invert : bool , normalize : bool ) : weighted_chars = dict () for c in chars : w = weigh ( c , font ) weighted_chars [ c ] = w if invert else 1 - w if normalize : cmax = max ( weighted_chars . values ()) cmin = min ( weighted_chars . values ()) for c in weighted_chars . keys () : weighted_chars [ c ] = ( weighted_chars [ c ] - cmin ) / ( cmax - cmin ) return weighted_chars","title":"weigh_chars"}]}